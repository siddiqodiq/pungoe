// components/CveDetailsDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Copy } from "lucide-react"

export const CveDetailsDialog = ({ 
  cve,
  open,
  onOpenChange 
}: {
  cve: any | null
  open: boolean
  onOpenChange: (open: boolean) => void
}) => {
  if (!cve) return null

  const getSeverityColor = (severity: string) => {
    switch (severity?.toUpperCase()) {
      case 'CRITICAL': return 'bg-red-500/20 text-red-500'
      case 'HIGH': return 'bg-orange-500/20 text-orange-500'
      case 'MEDIUM': return 'bg-yellow-500/20 text-yellow-500'
      case 'LOW': return 'bg-green-500/20 text-green-500'
      default: return 'bg-gray-500/20 text-gray-500'
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            {cve.id}
            <Badge className={getSeverityColor(cve.severity)}>
              {cve.severity}
            </Badge>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <h3 className="font-semibold mb-2">Description</h3>
            <p className="text-sm">{cve.description}</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="font-semibold mb-2">Published</h3>
              <p className="text-sm">{cve.published}</p>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Last Modified</h3>
              <p className="text-sm">{cve.updated}</p>
            </div>
          </div>

          {cve.weaknesses && (
            <div>
              <h3 className="font-semibold mb-2">Weaknesses</h3>
              <div className="flex flex-wrap gap-2">
                {cve.weaknesses.map((weakness: any, i: number) => (
                  <Badge key={i} variant="outline">
                    {weakness.value}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {cve.vectorString && (
            <div>
              <h3 className="font-semibold mb-2">CVSS Vector</h3>
              <div className="flex items-center gap-2">
                <code className="text-sm bg-muted px-2 py-1 rounded">
                  {cve.vectorString}
                </code>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(cve.vectorString)}
                >
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}

          <div>
            <h3 className="font-semibold mb-2">CVSS Score</h3>
            <div className="flex items-center gap-4">
              <div className="text-2xl font-bold">{cve.cvss}</div>
              <div className="flex-1">
                <div className="flex justify-between text-xs mb-1">
                  <span>0</span>
                  <span>10</span>
                </div>
                <div className={`h-2 rounded-full ${getSeverityColor(cve.severity).replace('/20', '/50')}`}>
                  <div 
                    className="h-full rounded-full" 
                    style={{ width: `${cve.cvss * 10}%` }}
                  />
                </div>
              </div>
            </div>
          </div>

          {cve.references?.length > 0 && (
            <div>
              <h3 className="font-semibold mb-2">References</h3>
              <div className="space-y-2">
                {cve.references.map((ref: any, i: number) => (
                  <div key={i} className="text-sm">
                    <a 
                      href={ref.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-blue-500 hover:underline break-all"
                    >
                      {ref.url}
                    </a>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}