// components/CveTable.tsx
import { useState, useEffect } from 'react'
import {
  Table,
  TableHeader,
  TableBody,
  TableHead,
  TableRow,
  TableCell,
} from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Search, ChevronLeft, ChevronRight } from "lucide-react"
import { CveDetailsDialog } from "./cve-detail-dialog"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"

export const CveTable = () => {
  const [cveData, setCveData] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [selectedCve, setSelectedCve] = useState<any>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [page, setPage] = useState(0)
  const [totalResults, setTotalResults] = useState(0)
  const [searchType, setSearchType] = useState<'keyword' | 'cveId'>('keyword')

  const getCurrentMonthDateRange = () => {
    const now = new Date()
    const year = now.getFullYear()
    const month = (now.getMonth() + 1).toString().padStart(2, '0')
    const day = now.getDate().toString().padStart(2, '0')
    
    return {
      startDate: `${year}-${month}-01T00:00:00.000`,
      endDate: `${year}-${month}-${day}T00:00:00.000`
    }
  }

  const fetchCveData = async (searchValue = '') => {
    try {
      setLoading(true)
      let url = 'https://services.nvd.nist.gov/rest/json/cves/2.0?'
      
      if (searchValue) {
        if (searchType === 'cveId') {
          url += `cveId=${encodeURIComponent(searchValue)}&`
        } else {
          url += `keywordSearch=${encodeURIComponent(searchValue)}&`
        }
      } else {
        // Default: show recent CVEs from current month
        const { startDate, endDate } = getCurrentMonthDateRange()
        url += `pubStartDate=${startDate}&pubEndDate=${endDate}&`
      }
      
      url += `resultsPerPage=10&startIndex=${page * 10}`
      
      const response = await fetch(url)
      const data = await response.json()
      
      if (data.vulnerabilities) {
        const formattedData = data.vulnerabilities.map((vuln: any) => ({
          id: vuln.cve.id,
          description: vuln.cve.descriptions.find((d: any) => d.lang === 'en')?.value || 'No description',
          severity: getSeverity(vuln.cve.metrics),
          cvss: getCvssScore(vuln.cve.metrics),
          published: formatDate(vuln.cve.published),
          updated: formatDate(vuln.cve.lastModified),
          vectorString: getVectorString(vuln.cve.metrics),
          weaknesses: getWeaknesses(vuln.cve.weaknesses),
          references: vuln.cve.references || [],
          metrics: vuln.cve.metrics
        }))
        setCveData(formattedData)
        setTotalResults(data.totalResults || 0)
      }
    } catch (err) {
      console.error('Error fetching CVE data:', err)
      setError('Failed to fetch CVE data')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchCveData()
  }, [page])

  const getSeverity = (metrics: any) => {
    if (!metrics) return 'UNKNOWN'
    if (metrics.cvssMetricV31) return metrics.cvssMetricV31[0].cvssData.baseSeverity
    if (metrics.cvssMetricV30) return metrics.cvssMetricV30[0].cvssData.baseSeverity
    if (metrics.cvssMetricV2) return metrics.cvssMetricV2[0].baseSeverity
    return 'UNKNOWN'
  }

  const getCvssScore = (metrics: any) => {
    if (!metrics) return 0
    if (metrics.cvssMetricV31) return metrics.cvssMetricV31[0].cvssData.baseScore
    if (metrics.cvssMetricV30) return metrics.cvssMetricV30[0].cvssData.baseScore
    if (metrics.cvssMetricV2) return metrics.cvssMetricV2[0].cvssData.baseScore
    return 0
  }

  const getVectorString = (metrics: any) => {
    if (!metrics) return 'N/A'
    if (metrics.cvssMetricV31) return metrics.cvssMetricV31[0].cvssData.vectorString
    if (metrics.cvssMetricV30) return metrics.cvssMetricV30[0].cvssData.vectorString
    if (metrics.cvssMetricV2) return metrics.cvssMetricV2[0].cvssData.vectorString
    return 'N/A'
  }

  const getWeaknesses = (weaknesses: any[]) => {
    if (!weaknesses || weaknesses.length === 0) return 'N/A'
    return weaknesses.map(w => w.description?.map((d: any) => d.value).join(', ')).join('; ')
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString()
  }

  const getSeverityColor = (severity: string) => {
    switch (severity?.toUpperCase()) {
      case 'CRITICAL': return 'bg-red-500/20 text-red-500'
      case 'HIGH': return 'bg-orange-500/20 text-orange-500'
      case 'MEDIUM': return 'bg-yellow-500/20 text-yellow-500'
      case 'LOW': return 'bg-green-500/20 text-green-500'
      default: return 'bg-gray-500/20 text-gray-500'
    }
  }

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    setPage(0)
    fetchCveData(searchTerm)
  }

  return (
    <div className="space-y-4">
      {/* Search Controls */}
      <div className="bg-card p-4 rounded-lg border">
        <form onSubmit={handleSearch} className="space-y-4">
          <Tabs 
            value={searchType} 
            onValueChange={(value) => setSearchType(value as 'keyword' | 'cveId')}
            className="w-full"
          >
            <TabsList className="grid grid-cols-2 w-full">
              <TabsTrigger value="keyword">Keyword Search</TabsTrigger>
              <TabsTrigger value="cveId">CVE ID Search</TabsTrigger>
            </TabsList>
          </Tabs>

          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder={searchType === 'cveId' ? 'Enter CVE ID (e.g. CVE-2024-1234)' : 'Search CVEs...'}
                className="pl-10"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <Button type="submit">
              <Search className="h-4 w-4 mr-2" /> Search
            </Button>
          </div>

          {!searchTerm && (
            <p className="text-sm text-muted-foreground">
              Showing recent CVEs from current month
            </p>
          )}
        </form>
      </div>

      {/* Results */}
      {loading ? (
        <div className="space-y-4">
          {[...Array(5)].map((_, i) => (
            <Skeleton key={i} className="h-16 w-full rounded-md" />
          ))}
        </div>
      ) : error ? (
        <div className="text-red-500 p-4">{error}</div>
      ) : (
        <>
          <ScrollArea className="h-[400px] md:h-[500px] w-full">
            <div className="min-w-[600px] md:min-w-0">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[120px]">CVE ID</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead className="w-[100px]">Severity</TableHead>
                    <TableHead className="w-[100px]">CVSS</TableHead>
                    <TableHead className="w-[100px]">Published</TableHead>
                    <TableHead className="w-[80px]">Details</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {cveData.map((cve) => (
                    <TableRow key={cve.id}>
                      <TableCell className="font-medium">
                        {cve.id}
                      </TableCell>
                      <TableCell>
                        <div className="line-clamp-2">
                          {cve.description}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge className={getSeverityColor(cve.severity)}>
                          {cve.severity.toLowerCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Progress 
                            value={cve.cvss * 10} 
                            className={`h-2 w-20 hidden md:block ${getSeverityColor(cve.severity).replace('/20', '/50')}`} 
                          />
                          <span>{cve.cvss.toFixed(1)}</span>
                        </div>
                      </TableCell>
                      <TableCell className="whitespace-nowrap">
                        {cve.published}
                      </TableCell>
                      <TableCell>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => setSelectedCve(cve)}
                        >
                          Details
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </ScrollArea>

          {/* Pagination */}
          <div className="flex items-center justify-between">
            <div className="text-sm text-muted-foreground">
              Showing {page * 10 + 1} to {Math.min((page + 1) * 10, totalResults)} of {totalResults} results
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setPage(p => Math.max(0, p - 1))}
                disabled={page === 0}
              >
                <ChevronLeft className="h-4 w-4 mr-1" /> Previous
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setPage(p => p + 1)}
                disabled={(page + 1) * 10 >= totalResults}
              >
                Next <ChevronRight className="h-4 w-4 ml-1" />
              </Button>
            </div>
          </div>
        </>
      )}

      {/* Details Dialog */}
      <CveDetailsDialog
        cve={selectedCve}
        open={!!selectedCve}
        onOpenChange={(open) => !open && setSelectedCve(null)}
      />
    </div>
  )
}