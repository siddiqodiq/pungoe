üìÅ app/api/chat/
    üìÑ app/api/chat/route.ts:
        // app/api/chat/route.ts
        import { NextResponse } from 'next/server';
        import { ollama } from 'ollama-ai-provider';
        import { streamText } from 'ai';
        
        export async function POST(req: Request) {
          const { messages } = await req.json();
          const model = ollama(process.env.OLLAMA_MODEL || 'llama3');
        
          try {
            const { textStream } = await streamText({
              model,
              messages,
            });
        
            const readableStream = new ReadableStream({
              async start(controller) {
                const encoder = new TextEncoder();
                for await (const chunk of textStream) {
                  controller.enqueue(encoder.encode(chunk));
                }
                controller.close();
              }
            });
        
            return new Response(readableStream, {
              headers: {
                'Content-Type': 'text/plain; charset=utf-8',
              },
            });
          } catch (error) {
            console.error('Error:', error);
            return NextResponse.json(
              { error: 'Internal Server Error' },
              { status: 500 }
            );
          }
        }üìÅ app/api/subdomain/
    üìÑ app/api/subdomain/route.ts:
        // app/api/scan/route.ts
        import { NextResponse } from 'next/server';
        
        export async function POST(req: Request) {
          try {
            const { domain } = await req.json();
            
            // Validasi input
            if (!domain) {
              return NextResponse.json(
                { error: 'Domain is required' },
                { status: 400 }
              );
            }
        
            // Forward request ke backend Flask
            const flaskResponse = await fetch('http://localhost:5000/api/scan', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ domain }),
            });
        
            if (!flaskResponse.ok) {
              const error = await flaskResponse.text();
              return NextResponse.json(
                { error: error || 'Failed to scan domain' },
                { status: flaskResponse.status }
              );
            }
        
            const data = await flaskResponse.json();
            return NextResponse.json(data);
          } catch (error) {
            console.error('Scan error:', error);
            return NextResponse.json(
              { error: 'Internal server error' },
              { status: 500 }
            );
          }
        }üìÅ app/api/waf/
    üìÑ app/api/waf/route.ts:
        // app/api/waf/route.ts
        import { NextResponse } from 'next/server';
        
        export async function POST(req: Request) {
          try {
            const { domain } = await req.json();
            
            if (!domain) {
              return NextResponse.json(
                { error: 'Domain is required' },
                { status: 400 }
              );
            }
        
            const flaskResponse = await fetch('http://localhost:5000/api/waf', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ domain }),
            });
        
            if (!flaskResponse.ok) {
              const error = await flaskResponse.text();
              return NextResponse.json(
                { error: error || 'Failed to check WAF' },
                { status: flaskResponse.status }
              );
            }
        
            const data = await flaskResponse.json();
            return NextResponse.json(data);
          } catch (error) {
            console.error('WAF check error:', error);
            return NextResponse.json(
              { error: 'Internal server error' },
              { status: 500 }
            );
          }
        }