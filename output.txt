üìÅ app/api/tools/subdomain/
    üìÑ app/api/tools/subdomain/route.ts:
        // app/api/tools/subdomain/route.ts
        import { NextResponse } from 'next/server';
        
        export async function POST(req: Request) {
          try {
            const { domain } = await req.json();
            
            // Validasi input minimal
            if (!domain || typeof domain !== 'string') {
              return NextResponse.json(
                { error: 'Valid domain is required' },
                { status: 400 }
              );
            }
        
            // Panggil backend Flask
            const flaskResponse = await fetch('http://localhost:5000/api/scan', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ domain }), // Hanya kirim domain saja
            });
        
            if (!flaskResponse.ok) {
              const error = await flaskResponse.text();
              return NextResponse.json(
                { error: error || 'Failed to scan domain' },
                { status: flaskResponse.status }
              );
            }
        
            const result = await flaskResponse.json();
            
            // Pastikan response memiliki format yang diharapkan
            if (!result || typeof result !== 'object') {
              throw new Error('Invalid response format from backend');
            }
        
            return NextResponse.json({
              success: true,
              output: result.output || result // Handle kedua kemungkinan struktur response
            });
        
          } catch (error) {
            console.error('Subdomain scan error:', error);
            return NextResponse.json(
              { error: error instanceof Error ? error.message : 'Internal server error' },
              { status: 500 }
            );
          }
        }    üìÑ app/api/tools/subdomain/scanner.ts:
        // app/api/tools/subdomain/scanner.ts
        interface ScanOptions {
            bruteForce?: boolean;
            depth?: 'quick' | 'normal' | 'deep';
          }
          
          export async function scanSubdomains(domain: string, options: ScanOptions = {}) {
            // Implementasi khusus subdomain scanning
            const flaskResponse = await fetch('http://localhost:5000/api/scan', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ domain, ...options })
            });
          
            if (!flaskResponse.ok) {
              throw new Error(await flaskResponse.text());
            }
          
            return await flaskResponse.json();
          }üìÅ app/api/tools/utils/
    üìÑ app/api/tools/utils/validators.ts:
        // app/api/tools/utils/validators.ts
        export function validateDomain(domain: string) {
            if (!domain) {
              return { valid: false, message: 'Domain is required' };
            }
            
            // Regex sederhana untuk validasi domain
            const domainRegex = /^(?!-)[A-Za-z0-9-]+([\-\.]{1}[a-z0-9]+)*\.[A-Za-z]{2,6}$/;
            if (!domainRegex.test(domain)) {
              return { valid: false, message: 'Invalid domain format' };
            }
            
            return { valid: true };
          }
          
          export function validateTarget(target: string) {
            // Validasi URL atau IP address
            try {
              new URL(target);
              return { valid: true };
            } catch {
              // Jika bukan URL, coba validasi sebagai IP
              const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
              if (ipRegex.test(target)) {
                return { valid: true };
              }
              return { valid: false, message: 'Target must be a valid URL or IP address' };
            }
          }
        
          // app/api/tools/utils/validators.ts
        // app/api/tools/utils/validators.ts
        export function validateTargetUrl(input: string) {
          if (!input || typeof input !== 'string') {
            return { valid: false, message: 'Input is required' };
          }
          
          // Bersihkan input
          const cleanedInput = input.trim().replace(/^https?:\/\//i, '');
        
          // Validasi dasar
          if (cleanedInput.length < 3) {
            return { valid: false, message: 'Input too short' };
          }
        
          // Cek mengandung karakter valid
          if (!/^[a-z0-9\-\.]+\.[a-z]{2,}$/i.test(cleanedInput)) {
            return { valid: false, message: 'Invalid domain format' };
          }
        
          return { valid: true };
        }üìÅ app/api/tools/waf/
    üìÑ app/api/tools/waf/detector.ts:
        // app/api/tools/waf/detector.ts
        interface WAFDetectionResult {
            isProtected: boolean;
            wafName?: string;
            detectedBy?: string[];
          }
          
          export async function detectWAF(url: string): Promise<WAFDetectionResult> {
            try {
              // Panggil backend Flask untuk WAF detection
              const flaskResponse = await fetch('http://localhost:5000/api/waf', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ url })
              });
          
              if (!flaskResponse.ok) {
                throw new Error(await flaskResponse.text());
              }
          
              const data = await flaskResponse.json();
              
              // Normalisasi response dari backend
              return {
                isProtected: data.protected || false,
                wafName: data.waf_name || 'Unknown',
                detectedBy: data.detected_by || []
              };
              
            } catch (error) {
              console.error('WAF detection failed:', error);
              throw new Error(`WAF detection failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
          }    üìÑ app/api/tools/waf/route.ts:
        // app/api/tools/waf/route.ts
        import { NextResponse } from 'next/server';
        import { detectWAF } from './detector';
        import { validateTargetUrl } from '../utils/validators';
        
        // app/api/tools/waf/route.ts
        // app/api/tools/waf/route.ts
        export async function POST(req: Request) {
          try {
            const { domain, url } = await req.json();
            
            // Normalisasi input (utamakan domain, fallback ke url)
            const targetDomain = domain || 
                               (url ? url.replace(/^https?:\/\//i, '').split('/')[0] : null);
        
            if (!targetDomain) {
              return NextResponse.json(
                { error: "Domain is required (provide either 'domain' or 'url' parameter)" },
                { status: 400 }
              );
            }
        
            // Panggil backend Flask dengan format yang DIA HARUSKAN
            const flaskResponse = await fetch('http://localhost:5000/api/waf', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ domain: targetDomain }) // Pastikan format ini sesuai Flask
            });
        
            if (!flaskResponse.ok) {
              const error = await flaskResponse.text();
              console.error('Flask error:', error);
              throw new Error(error);
            }
        
            const result = await flaskResponse.json();
            return NextResponse.json(result);
        
          } catch (error) {
            console.error('WAF detection failed:', error);
            return NextResponse.json(
              { error: error instanceof Error ? error.message : 'WAF detection failed' },
              { status: 500 }
            );
          }
        }